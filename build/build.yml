# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# Build
# Create Self-Extracting Exe
# Sign Self-Extracting Exe

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline publishes the Wpf project, then signs the binaries according to the signing profiles.
pool:
  name: VSEngSS-MicroBuild2022-1ES
  demands:
  - msbuild
  - visualstudio

trigger:
  branches:
    include:
    - main

parameters:
- name: signType
  type: string
  default: real

variables:
  TeamName: VSSetup
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  projectName: ADMXExtractor
  projectDirectory: $(Build.SourcesDirectory)\src\ADMXExtractor
  projectFullPath: $(Build.SourcesDirectory)\src\ADMXExtractor\ADMXExtractor.sln
  publishDir: Release\net472\x86\publish\
  logFileName: MyWpfAppSigningLog.txt
  finalDrop: $(Build.StagingDirectory)\finalDrop
  outputNameWithExtension: VisualStudioAdminTemplates.exe

steps:
- checkout: self
  submodules: true
  persistCredentials: true

- task: NuGetToolInstaller@0
  displayName: Install NuGet
  inputs:
    versionSpec: '5.8.1'

- task: NuGetAuthenticate@0
  displayName: "NuGet Authenticate"
  inputs:
    nuGetServiceConnections: VSSetup-PubSuiteConnection

- task: UseDotNet@2
  displayName: Install .NET Core SDK
  inputs:
    packageType: sdk
    useGlobalJson: true
    workingDirectory: $(Build.SourcesDirectory)

- task: NuGetCommand@2
  displayName: NuGet restore packages.config
  inputs:
    restoreSolution: $(Build.SourcesDirectory)\packages.config
    restoreDirectory: $(Build.SourcesDirectory)\packages
    feedsToUse: config
    nugetConfigPath: $(Build.SourcesDirectory)\nuget.config    

- task: NuGetCommand@2
  displayName: NuGet restore ADMXExtractor.sln
  inputs:
    restoreSolution: $(Build.SourcesDirectory)\src\ADMXExtractor\ADMXExtractor.sln
    restoreDirectory: $(Build.SourcesDirectory)\packages
    feedsToUse: config

- task: PowerShell@1  
  displayName: Install the Nerdbank Versioning tool and set the Version
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      dotnet tool install --tool-path . nbgv
      $version = .\nbgv get-version -v Version
      Write-Host "Setting Version to $version"
      Write-Host "##vso[task.setvariable variable=Version;]$version"

- task: MicroBuildLocalizationPlugin@4
  inputs:
    type: 'full'
    languages: 'VS'
    lsbuildVersion: 'V7'
    feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'

- task: MicroBuildSigningPlugin@2
  displayName: Install Signing Plugin
  inputs:
    signType: '${{ parameters.signType }}'
    feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
  env:
    TeamName: '$(TeamName)'

- task: MSBuild@1
  displayName: Build ADMXExtractor.csproj
  inputs:
    solution: $(Build.SourcesDirectory)\src\ADMXExtractor\ADMXExtractor.sln
    msbuildArguments: >
      /v:diag
      /p:OutDir=$(Build.StagingDirectory)\$(projectName)\
      /p:Version=$(Version)

- task: PowerShell@2
  name: PrepareStagingDirectoryForSelfExtractor
  displayName: Prepare the intermediate staging directory for the SelfExtractor.
  inputs:
    workingDirectory: $(Build.SourcesDirectory)
    filePath: $(Build.SourcesDirectory)\build\PrepareStagingDirectoryForSelfExtractor.ps1
    arguments:  -ArtifactsDir $(Build.StagingDirectory)\$(projectName)\ -IntermediateDropPath $(Build.StagingDirectory)\$(projectName)\Intermediate\  -Verbose

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)\ADMXExtractor' 
    artifactName: 'drop'

- task: PowerShell@2
  name: GenerateSelfExtractor
  displayName: Generate the self extracting .exe for ADMXExtractor and all admx files.
  inputs:
    workingDirectory: $(Build.SourcesDirectory)
    filePath: $(Build.SourcesDirectory)\build\ADMXExtractor\GenerateSelfExtractor.ps1
    arguments:  -RootDir $(Build.SourcesDirectory) -ArtifactsDir $(Build.StagingDirectory)\$(projectName)\Intermediate\ -ArtifactsDropTarget $(finalDrop) -OutputNameWithExtension $(outputNameWithExtension) -Verbose

- task: MSBuild@1
  displayName: Sign packages
  inputs:
    solution: build\ADMXExtractor\ADMXExtractor.signproj
    msbuildArguments: '/v:diag /t:Build /p:OutDir=$(finalDrop) /p:TargetFileToSign=$(finalDrop)\$(outputNameWithExtension)'

- task: PublishBuildArtifacts@1
  displayName: Publish 'VisualStudioAdminTemplates.exe' artifact
  inputs:
    PathtoPublish: $(finalDrop)
    ArtifactName: exe    